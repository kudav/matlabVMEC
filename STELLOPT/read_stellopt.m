function data = read_stellopt(filename,varargin)
%READ_STELLOPT Reads the STELLOPT output files.
%   This file reads the various files generated by STELLOPT.  This
%   currently includes the 'output.' and 'p_prof.' files.  The data from
%   these files are stored in a data structure.  The format of this
%   structure is a function of the file.
%
%   Example:
%       out_data=read_stellopt('output.test');
%       press_data=read_stellopt('p_prof.test.min');
%
%   See also plot_stellopt and make_stellopt_movie.
%
%   Written by:     S.Lazerson (lazerson@pppl.gov)
%   Version:        1.6
%   Date:           1/17/11

% 08/18/11 - SAL  Updated to handle STELLOPT v2.0 style output
% 03/21/12 - SAL  Updated to handle filenames better

data=-1;
% Determine routine to call
sdex=strfind(filename,'.');
if isempty(sdex)
    disp(['ERROR: Filename ' filename '!']);
    return
end
if ~isempty(strfind(filename,'stellopt.'))
        data=read_stellopt_new(filename);
elseif ~isempty(strfind(filename,'ipecopt.'))
        data=read_stellopt_new(filename);
elseif ~isempty(strfind(filename,'output.'))
        data=read_stellopt_output(filename);
elseif ~isempty(strfind(filename,'threed1.'))
        data=read_vmec_threed1(filename);
elseif ~isempty(strfind(filename,'p_prof.'))
        data=read_stellopt_pprof(filename);
elseif ~isempty(strfind(filename,'mag_diags.'))
        data=read_stellopt_magdiag(filename);
elseif ~isempty(strfind(filename,'mse_prof.'))
        data=read_stellopt_mseprof(filename);
elseif ~isempty(strfind(filename,'jacobian.'))
        data=read_stellopt_jacobian(filename);
elseif ~isempty(strfind(filename,'fevals.'))
        data=read_stellopt_feval(filename);
elseif ~isempty(strfind(filename,'errvals.'))
        data=read_stellopt_errvals(filename);
elseif ~isempty(strfind(filename,'map.'))
        data=read_stellopt_map(filename);
elseif ~isempty(strfind(filename,'map_plane.'))
        data=read_stellopt_map_plane(filename);
elseif ~isempty(strfind(filename,'map_linear.'))
        data=read_stellopt_map_linear(filename);
elseif ~isempty(strfind(filename,'xvec.'))
        data=read_stellopt_xvec(filename);
else
        disp(['ERROR: Unsuported filetype' filename '!']);
end
return
end

function data = read_stellopt_output(filename)
%READ_STELLOPT_OUTPUT Reads the STELLOPT output file
%   This file reads the 'output' file from the STELLOPT code into a
%   structure named data.
%   Version v0.9 (lazerson@pppl.gov)

% Defaults
minvvsep=[];
minbdsep=[];
% Main Program
fid=fopen(filename,'r');
% First read headers
line=fgetl(fid);
while isempty(strfind(line,'Chi-Sq('))
    line=fgetl(fid);
end
% Scan for Chi-Sq values
%line=fgetl(fid);
numels=1;
names=cell(1,1);
while strfind(line,'(')
    d1=strfind(line,'(')+1;
    d2=strfind(line,')')-1;
    names=[names; line(d1:d2)];
    numels=numels+1;
    line=fgetl(fid);
end
names=names(2:numels);
numels=numels-1;
data.names=names;
data.numels=numels;
% Now start at the beginning of the file
frewind(fid);
line=fgetl(fid); % First Blank Line
line=fgetl(fid); % Aspect Ratio Line
aspect_ratio=sscanf(line,'%*15c %f %*s');
chi_total=sscanf(line,'%*15c %*f %*8c %e %*s');
func_eval=sscanf(line,'%*15c %*f %*8c %*e %*22c %d');
line=fgetl(fid); % js line
js=sscanf(line,'%*8c %d %*s');
jst=sscanf(line,'%*8c %*d %*6c %d %*s');
line=fgetl(fid); % Bmin Line
bmin0=sscanf(line,'%*9c %e %*s');
bminpitwo=sscanf(line,'%*9c %*e %*11c %e %*s');
bminpi=sscanf(line,'%*9c %*e %*11c %*e %*9c %e %*s');
line=fgetl(fid); % Bmax Line
bmax0=sscanf(line,'%*9c %e %*s',1);
bmaxpitwo=sscanf(line,'%*9c %*e %*11c %e %*s');
bmaxpi=sscanf(line,'%*9c %*e %*11c %*e %*9c %e %*s');
line=fgetl(fid); % Ip Beta Line
ipmax=sscanf(line,'%*28c %e %*s');
avgbeta=sscanf(line,'%*28c %*e %*15c %e');
% Check for VV data then check for BD data
pos=ftell(fid);
line=fgetl(fid);
if strfind(line,'Plasma-VV')
    minvvsep=sscanf(line,'%*20c %e %*10c %*e %*10c %*e');
    rmsvvdist=sscanf(line,'%*20c %*e %*10c %e %*10c %*e');
    maxvvdist=sscanf(line,'%*20c %*e %*10c %*e %*10c %e');
    pos=ftell(fid);
    line=fgetl(fid);
    if strfind(line,'Plasma-BD')
        minbdsep=sscanf(line,'%*20c %e %*10c %*e %*10c %*e');
        rmsbddist=sscanf(line,'%*20c %*e %*10c %e %*10c %*e');
        maxbddist=sscanf(line,'%*20c %*e %*10c %*e %*10c %e');
    else
        fseek(fid,pos,'bof');
    end
elseif strfind(line,'Plasma-BD')
    minbdsep=sscanf(line,'%*20c %e %*10c %*e %*10c %*e');
    rmsbddist=sscanf(line,'%*20c %*e %*10c %e %*10c %*e');
    maxbddist=sscanf(line,'%*20c %*e %*10c %*e %*10c %e');
else
    fseek(fid,pos,'bof');
end
% Check for EXTCUR
pos=ftell(fid);
line=fgetl(fid);
if isempty(line)
    line=fgetl(fid);
    if strfind(strtrim(line),'EXTCUR =')
        % We need to read in the extcur array
        dex=strfind(line,'=')+1;
        subline=strtrim(line(dex:numel(line)));
        extcur=sscanf(subline,'%e')';
        % Now get the phiedge value
        line=fgetl(fid);
        phiedge=sscanf(line,'%*11c %e');
    else
        % Get the phiedge value
        phiedge=sscanf(line,'%*11c %e');
        % Get the RBZB Output
        line=fgetl(fid);
        curtor=sscanf(line,'%*11c %e');
        line=fgetl(fid);
        spred_ped=sscanf(line,'%*14c %e');
        line=fgetl(fid);
        dex=strfind(line,'=')+1;
        subline=strtrim(line(dex:numel(line)));
        am=sscanf(subline,'%e')';
        line=fgetl(fid);
        dex=strfind(line,'=')+1;
        subline=strtrim(line(dex:numel(line)));
        ai=sscanf(subline,'%e')';
        line=fgetl(fid);
        ac_form=sscanf(line,'%*12c %d');
        line=fgetl(fid);
        dex=strfind(line,'=')+1;
        subline=strtrim(line(dex:numel(line)));
        ac=sscanf(subline,'%e')';
        line=fgetl(fid);
        dex=strfind(line,'=')+1;
        subline=strtrim(line(dex:numel(line)));
        raxis=sscanf(subline,'%e')';
        line=fgetl(fid);
        dex=strfind(line,'=')+1;
        subline=strtrim(line(dex:numel(line)));
        zaxis=sscanf(subline,'%e')';
        line=fgetl(fid);
        dex=strfind(line,'=')+1;
        subline=strtrim(line(dex:numel(line)));
        raxis_old=sscanf(subline,'%e')';
        line=fgetl(fid);
        dex=strfind(line,'=')+1;
        subline=strtrim(line(dex:numel(line)));
        zaxis_old=sscanf(subline,'%e')';
        line=fgetl(fid);
        while strfind(line,'RBC')
            % Eventually we'll handle the RBC and ZBS values
            pos=ftell(fid);
            line=fgetl(fid);
        end
        fseek(fid,pos,'bof');
    end
else
    fseek(fid,pos,'bof');
end
% Loop through Chi-Sq values
for i=1:numels
    %Fix names
    test=names{i};
    test(test==' ')='';
    test(test=='/')='';
    test(test=='.')='_';
    dex=find(test=='<');
    test(test=='>')='';
    if ~isempty(dex)
        test=[test(1:dex-1) 'VolAvg' test(dex+1:numel(test))];
    end
    names{i}=test;
    %Read Line
    line=fgetl(fid);
    test = strrep(test,'-','_');
    test = strrep(test,'/','');
    data.(strcat('chisq_',strtrim(test)))=sscanf(line,'%*28c %e %*s',1);
    data.(strcat('rms_',strtrim(test)))=sscanf(line,'%*28c %*e %*8c %e %*s');
    data.(strcat('wgt_',strtrim(test)))=sscanf(line,'%*28c %*e %*8c %*e %*6c %e %*s');
    if strfind(line,'nw_')
        data.(strcat('nw_',strtrim(test)))=sscanf(line,'%*28c %*e %*8c %*e %*6c %*e %*3c %d');
    else
        data.(strcat('nw_',strtrim(test)))=sscanf(line,'%*28c %*e %*8c %*e %*6c %*e %*15c %d');
    end
end
while ~feof(fid)
    line=fgetl(fid); % Get blank line
    line=fgetl(fid); % Aspect Ratio Line
    if strfind(line,'Aspect')
        aspect_ratio=[aspect_ratio; sscanf(line,'%*15c %f %*s')];
        chi_total=[chi_total; sscanf(line,'%*15c %*f %*8c %e %*s')];
        func_eval=[func_eval; sscanf(line,'%*15c %*f %*8c %*e %*22c %d')];
        line=fgetl(fid); % js line
        js=[js; sscanf(line,'%*8c %d %*s')];
        jst=[jst; sscanf(line,'%*8c %*d %*6c %d %*s')];
        line=fgetl(fid); % Bmin Line
        bmin0=[bmin0; sscanf(line,'%*9c %e %*s')];
        bminpitwo=[bminpitwo; sscanf(line,'%*9c %*e %*11c %e %*s')];
        bminpi=[bminpi; sscanf(line,'%*9c %*e %*11c %*e %*9c %e %*s')];
        line=fgetl(fid); % Bmax Line
        bmax0=[bmax0; sscanf(line,'%*9c %e %*s',1)];
        bmaxpitwo=[bmaxpitwo; sscanf(line,'%*9c %*e %*11c %e %*s')];
        bmaxpi=[bmaxpi; sscanf(line,'%*9c %*e %*11c %*e %*9c %e %*s')];
        line=fgetl(fid); % Ip Beta Line
        ipmax=[ipmax; sscanf(line,'%*28c %e %*s')];
        avgbeta=[avgbeta; sscanf(line,'%*28c %*e %*15c %e')];
        % Check for VV data
        pos=ftell(fid);
        line=fgetl(fid);
        if strfind(line,'Plasma-VV')
            minvvsep=[minvvsep; sscanf(line,'%*20c %e %*10c %*e %*10c %*e')];
            rmsvvdist=[rmsvvdist; sscanf(line,'%*20c %*e %*10c %e %*10c %*e')];
            maxvvdist=[maxvvdist; sscanf(line,'%*20c %*e %*10c %*e %*10c %e')];
            pos=ftell(fid);
            line=fgetl(fid);
            if strfind(line,'Plasma-BD')
                minbdsep=[minbdsep; sscanf(line,'%*20c %e %*10c %*e %*10c %*e')];
                rmsbddist=[rmsbddist; sscanf(line,'%*20c %*e %*10c %e %*10c %*e')];
                maxbddist=[maxbddiat; sscanf(line,'%*20c %*e %*10c %*e %*10c %e')];
            else
                fseek(fid,pos,'bof');
            end
        elseif strfind(line,'Plasma-BD')
            minbdsep=[mindbsep; sscanf(line,'%*20c %e %*10c %*e %*10c %*e')];
            rmsbddist=[rmsbddist; sscanf(line,'%*20c %*e %*10c %e %*10c %*e')];
            maxbddist=[maxbddist; sscanf(line,'%*20c %*e %*10c %*e %*10c %e')];
        else
            fseek(fid,pos,'bof');
        end
        % Check for EXTCUR
        pos=ftell(fid);
        line=fgetl(fid);
        if isempty(line)
            line=fgetl(fid);
            if strcmp(strfind(line),'EXTCUR =')
                % We need to read in the extcur array
                dex=strfind(line,'=')+1;
                subline=strtrim(line(dex:numel(line)));
                extcur=[extcur; sscanf(subline,'%e')'];
                % Now get the phiedge value
                line=fgetl(fid);
                phiedge=[phiedge; sscanf(line,'%*11c %e')];
            else
                % Get the phiedge value
                phiedge=[phiedge; sscanf(line,'%*11c %e')];
                % Get the RBZB Output
                line=fgetl(fid);
                curtor=[curtor; sscanf(line,'%*11c %e')];
                line=fgetl(fid);
                spred_ped=[spred_ped; sscanf(line,'%*14c %e')];
                line=fgetl(fid);
                dex=strfind(line,'=')+1;
                subline=strtrim(line(dex:numel(line)));
                am=[am; sscanf(subline,'%e')'];
                line=fgetl(fid);
                dex=strfind(line,'=')+1;
                subline=strtrim(line(dex:numel(line)));
                ai=[ai; sscanf(subline,'%e')'];
                line=fgetl(fid);
                ac_form=[ac_form; sscanf(line,'%*12c %d')];
                line=fgetl(fid);
                dex=strfind(line,'=')+1;
                subline=strtrim(line(dex:numel(line)));
                ac=[ac; sscanf(subline,'%e')'];
                line=fgetl(fid);
                dex=strfind(line,'=')+1;
                subline=strtrim(line(dex:numel(line)));
                raxis=[raxis; sscanf(subline,'%e')'];
                line=fgetl(fid);
                dex=strfind(line,'=')+1;
                subline=strtrim(line(dex:numel(line)));
                zaxis=[zaxis; sscanf(subline,'%e')'];
                line=fgetl(fid);
                dex=strfind(line,'=')+1;
                subline=strtrim(line(dex:numel(line)));
                raxis_old=[raxis_old; sscanf(subline,'%e')'];
                line=fgetl(fid);
                dex=strfind(line,'=')+1;
                subline=strtrim(line(dex:numel(line)));
                zaxis_old=[zaxis_old; sscanf(subline,'%e')'];
                line=fgetl(fid);
                while strfind(line,'RBC')
                    % Eventually we'll handle the RBC and ZBS values
                    pos=ftell(fid);
                    line=fgetl(fid);
                end
                fseek(fid,pos,'bof');
            end
        else
            fseek(fid,pos,'bof');
        end
        %Now start reading
        for i=1:numels
            %Fix names
            test=names{i};
            test = strrep(test,'-','_');
            %Read Line
            line=fgetl(fid);
            data.(strcat('chisq_',strtrim(test)))=[data.(strcat('chisq_',strtrim(test))); sscanf(line,'%*28c %e %*s',1)];
            data.(strcat('rms_',strtrim(test)))=[data.(strcat('rms_',strtrim(test))); sscanf(line,'%*28c %*e %*8c %e %*s')];
            data.(strcat('wgt_',strtrim(test)))=[data.(strcat('wgt_',strtrim(test))); sscanf(line,'%*28c %*e %*8c %*e %*6c %e %*s')];
            if strfind(line,'nw_')
                data.(strcat('nw_',strtrim(test)))=[data.(strcat('nw_',strtrim(test))); sscanf(line,'%*28c %*e %*8c %*e %*6c %*e %*3c %d')];
            else
                data.(strcat('nw_',strtrim(test)))=[data.(strcat('nw_',strtrim(test))); sscanf(line,'%*28c %*e %*8c %*e %*6c %*e %*15c %d')];
            end
        end
    elseif strfind(line,'Number')
        val=sscanf(line,'%*24c %d %*24c %d');
        data.numvars=val(1);
        data.numcons=val(2);
        line=fgetl(fid);
        line=fgetl(fid);
        data.min_chisq=sscanf(line,'%*18c %e %*13c %*d');
        data.min_func=sscanf(line,'%*18c %*e %*13c %d');
        line=fgetl(fid);
        line=fgetl(fid);
        line=fgetl(fid);
    else
        disp('ERROR: Unknown Line');
    end
end
fclose(fid);
% Now do some cleanup
data.struc_names=names;
data.aspect_ratio=aspect_ratio;
data.chi_total=chi_total;
data.func_eval=func_eval;
data.js=js;
data.jst=jst;
data.bmin0=bmin0;
data.bminpitwo=bminpitwo;
data.bminpi=bminpi;
data.bmax0=bmax0;
data.bmaxpitwo=bmaxpitwo;
data.bmaxpi=bmaxpi;
data.ipmax=ipmax;
data.avgbeta=avgbeta;
if ~isempty(minvvsep)   %VV Values
    data.minvvsep=minvvsep;
    data.rmsvvdist=rmsvvdist;
    data.maxvvdist=maxvvdist;
end
if ~isempty(minbdsep)   %BD Values
    data.minbdsep=minbdsep;
    data.rmsbddist=rmsbddist;
    data.maxbddist=maxbddist;
end
data.datatype='stellopt_output';
return
end

function data = read_stellopt_jacobian(filename)
%READ_STELLOPT_JACOBIAN Reads the STELLOPT jacobian output file
fid=fopen(filename,'r');
% Get Header
temp=fscanf(fid,'%d',2);
data.m=temp(1);
data.n=temp(2);
data.jac=fscanf(fid,'%e',[data.n data.m]);
% Close File
fclose(fid);
% Read the labels
try
    fid = fopen('var_labels','r');
    data.nvars=fscanf(fid,'%d',1);
    line=fgetl(fid);
    for i=1:data.nvars
        line=fgetl(fid);
        dex=strfind(line,'(')-1;
        if isempty(dex), dex=length(line); end
        data.var_name{i}=line(1:dex);
    end
    data.mtargets=fscanf(fid,'%d',1);
    fgetl(fid);
    for i=1:data.mtargets
        line=fgetl(fid);
        dex=length(line);
        data.target_name{i}=line(1:dex);
    end
    fclose(fid);
catch
end
data.datatype='stellopt_jacobian';
end

function data = read_stellopt_feval(filename)
%READ_STELLOPT_JACOBIAN Reads the STELLOPT feval output file
fid=fopen(filename,'r');
% Get Header
temp=fscanf(fid,'%d',2);
data.m=temp(1);
data.n=temp(2);
data.fvec0=fscanf(fid,'%e',[1 data.m]);
data.fvec=fscanf(fid,'%e',[data.n data.m]);
%data.fvec=fscanf(fid,'%e',[data.n-1 data.m]);
% Close File
fclose(fid);
data.datatype='stellopt_feval';
end

function data = read_stellopt_map(filename)
%READ_STELLOPT_JACOBIAN Reads the STELLOPT feval output file
fid=fopen(filename,'r');
% Get Header
temp=fscanf(fid,'%d',4);
data.m         = temp(1);
data.n         = temp(2);
data.ndiv      = temp(3);
data.numsearch = temp(4);
data.x         = fscanf(fid,'%e',[data.n data.numsearch]);
data.fval      = fscanf(fid,'%e',[data.m data.numsearch]);
% Close File
fclose(fid);
% Calc and sort
arr=[data.m];
for i = 1:data.n
    arr = [arr data.ndiv];
end
data.fval_save = data.fval;
data.x_save = data.x;
data.fval      = reshape(data.fval,arr);
arr(1) = data.n;
data.x      = reshape(data.x,arr);
data.chisq_tot = squeeze(sum(data.fval.*data.fval,1));
% Read the labels
try
    fid = fopen('var_labels','r');
    data.nvars=fscanf(fid,'%d',1);
    line=fgetl(fid);
    for i=1:data.nvars
        line=fgetl(fid);
        dex=strfind(line,'(')-1;
        if isempty(dex), dex=length(line); end
        data.var_name{i}=line(1:dex);
    end
    data.mtargets=fscanf(fid,'%d',1);
    fgetl(fid);
    for i=1:data.mtargets
        line=fgetl(fid);
        dex=length(line);
        data.target_name{i}=line(1:dex);
    end
    fclose(fid);
catch
end
data.datatype='stellopt_map';
end

function data = read_stellopt_map_linear(filename)
%READ_STELLOPT_JACOBIAN Reads the STELLOPT feval output file
fid=fopen(filename,'r');
% Get Header
temp=fscanf(fid,'%d',3);
data.m         = temp(1);
data.n         = temp(2);
data.numsearch = temp(3);
data.x         = fscanf(fid,'%e',[data.n data.numsearch]);
data.fval      = fscanf(fid,'%e',[data.m data.numsearch]);
% Close File
fclose(fid);
% Calc and sort
data.x0 = data.x(:,1);
data.f0 = data.fval(:,1);
data.x  = data.x(:,2:data.numsearch);
data.fval = data.fval(:,2:data.numsearch);
data.xm1  = data.x(:,1:data.n);
data.xp1  = data.x(:,data.n+1:end);
for i = 1:data.n
    data.dx(i) = data.xp1(i,i)-data.xm1(i,i);
end
data.ddx = 0.25.*data.dx.*data.dx;
data.fm1  = data.fval(:,1:data.n);
data.fp1  = data.fval(:,data.n+1:end);
data.df   = data.fp1-data.fm1;
data.ddf  = data.fp1+data.fm1;
for i = 1:data.n
    data.dfdx(:,i) = data.df(:,i)./data.dx(i);
    data.ddfddx(:,i) = (data.ddf(:,i)-2*data.f0)./data.ddx(i);
end
% Read the labels
try
    fid = fopen('var_labels','r');
    data.nvars=fscanf(fid,'%d',1);
    line=fgetl(fid);
    for i=1:data.nvars
        line=fgetl(fid);
        dex=strfind(line,'(')-1;
        if isempty(dex), dex=length(line); end
        data.var_name{i}=line(1:dex);
    end
    data.mtargets=fscanf(fid,'%d',1);
    fgetl(fid);
    for i=1:data.mtargets
        line=fgetl(fid);
        dex=length(line);
        data.target_name{i}=line(1:dex);
    end
    fclose(fid);
catch
end
data.datatype='stellopt_map_linear';
end

function data = read_stellopt_map_plane(filename)
%READ_STELLOPT_JACOBIAN Reads the STELLOPT feval output file
fid=fopen(filename,'r');
% Get Header
temp=fscanf(fid,'%d',4);
data.m         = temp(1);
data.n         = temp(2);
data.ndiv      = temp(3);
data.numsearch = temp(4);
data.x         = fscanf(fid,'%e',[data.n data.numsearch]);
data.fval      = fscanf(fid,'%e',[data.m data.numsearch]);
% Close File
fclose(fid);
% Calc and sort
arr=[data.m];
for i = 1:2
    arr = [arr data.ndiv];
end
data.fval_save = data.fval;
data.x_save = data.x;
data.fval      = reshape(data.fval,arr);
arr(1) = data.n;
data.x      = reshape(data.x,arr);
data.chisq_tot = squeeze(sum(data.fval.*data.fval,1));
% Read the labels
try
    fid = fopen('var_labels','r');
    data.nvars=fscanf(fid,'%d',1);
    line=fgetl(fid);
    for i=1:data.nvars
        line=fgetl(fid);
        dex=strfind(line,'(')-1;
        if isempty(dex), dex=length(line); end
        data.var_name{i}=line(1:dex);
    end
    data.mtargets=fscanf(fid,'%d',1);
    fgetl(fid);
    for i=1:data.mtargets
        line=fgetl(fid);
        dex=length(line);
        data.target_name{i}=line(1:dex);
    end
    fclose(fid);
catch
end
data.datatype='stellopt_map_plane';
end

function data = read_stellopt_xvec(filename)
%READ_STELLOPT_JACOBIAN Reads the STELLOPT feval output file
fid=fopen(filename,'r');
% Read File
temp = fscanf(fid,'%d',2);
data.n = temp(1);
data.iter = temp(2);
data.x = fscanf(fid,'%e',[data.n]);
data.chisq=fscanf(fid,'%e',1);
while ~feof(fid)
    temp = fscanf(fid,'%d',2);
    if isempty(temp)
        break;
    end
    data.n = temp(1);
    data.iter = [data.iter temp(2)];
    data.x = [data.x fscanf(fid,'%e',[data.n])];
    data.chisq=[data.chisq fscanf(fid,'%e',1)];
end
data.chisq=data.chisq.^2;
% Close File
fclose(fid);
% Read the labels
try
    fid = fopen('var_labels','r');
    data.nvars=fscanf(fid,'%d',1);
    line=fgetl(fid);
    for i=1:data.nvars
        line=fgetl(fid);
        dex=strfind(line,'(')-1;
        if isempty(dex), dex=length(line); end
        data.var_name{i}=line(1:dex);
    end
    data.mtargets=fscanf(fid,'%d',1);
    fgetl(fid);
    for i=1:data.mtargets
        line=fgetl(fid);
        dex=length(line);
        data.target_name{i}=line(1:dex);
    end
    fclose(fid);
catch
end
data.datatype='stellopt_xvec';
end

function data = read_stellopt_errvals(filename)
%READ_STELLOPT_ERRVALS Reads the STELLOPT errvals output file
fid=fopen(filename,'r');
% Get Header
fgetl(fid);
nopt=fscanf(fid,'%d',1);
data.err=fscanf(fid,'%e',nopt);
fgetl(fid);
data.wegt=fscanf(fid,'%e',nopt);
% Close File
fclose(fid);
data.datatype='stellopt_errvals';
end

function data = read_stellopt_magdiag(filename)
%READ_STELLOPT_MAGDIAG Reads the STELLoPT mag_diag output file
fid=fopen(filename,'r');
% Get Header
data.head=fgetl(fid);
% Get blank line
fgetl(fid);
% Read first data line
line=fgetl(fid);
vals=sscanf(line,'%g %g %g %g %*s',[1 4]);
data.names={char(sscanf(line,'%*e %*e %*e %*e %s'))'};
arr=vals;
test=0;
while ~test
    line=fgetl(fid);
    if (line == -1)
        test=1;
    else
        vals=sscanf(line,'%g %g %g %g %*s',[1 4]);
        data.names=[data.names char(sscanf(line,'%*e %*e %*e %*e %s'))'];
        arr=[arr; vals];
    end 
end
data.data=arr;
% Close File
fclose(fid);
data.datatype='stellopt_magdiag';
end

function data = read_stellopt_pprof(filename)
%READ_STELLOPT_PPROF Reads the STELLOPT p_prof output file
%   This file reads the 'p_prof' file from the STELLOPT code into a
%   structure named data.
%   Version v0.9 (lazerson@pppl.gov)

% Main Program
fid=fopen(filename,'r');
% First read header
data.head=fgetl(fid);
switch data.head
    case {'NE','TE','TI'}
        %NE
        fseek(fid,0,-1);
        test_str='NE';
        temp=fgetl(fid);
        while isempty(strfind(temp,test_str)) && isstr(temp)
            temp=fgetl(fid);
            if (feof(fid))
                temp = -5;
            end
        end
        if temp ~= -5
            data.ne_data=[];
            data.ne_header=fgetl(fid);
            temp = fgetl(fid);
            while ~isempty(temp)
                vals = sscanf(temp,'%e',[1 8]);
                if isempty(vals)
                    temp=[];
                else
                    data.ne_data=[data.ne_data; vals];
                    temp = fgetl(fid);
                end
            end
        end
        %TE
        fseek(fid,0,-1);
        test_str='TE';
        temp=fgetl(fid);
        while isempty(strfind(temp,test_str)) && isstr(temp)
            temp=fgetl(fid);
            if (feof(fid))
                temp = -5;
            end
        end
        if temp ~= -5
            data.te_data=[];
            data.te_header=fgetl(fid);
            temp = fgetl(fid);
            while ~isempty(temp)
                vals = sscanf(temp,'%e',[1 8]);
                if isempty(vals)
                    temp=[];
                else
                    data.te_data=[data.te_data; vals];
                    temp = fgetl(fid);
                end
            end
        end
        %TI
        fseek(fid,0,-1);
        test_str='TI';
        temp=fgetl(fid);
        while isempty(strfind(temp,test_str)) && isstr(temp)
            temp=fgetl(fid);
            if (feof(fid))
                temp = -5;
            end
        end
        if temp ~= -5
            data.ti_data=[];
            data.ti_header=fgetl(fid);
            temp = fgetl(fid);
            while ~isempty(temp)
                vals = sscanf(temp,'%e',[1 8]);
                if isempty(vals)
                    temp=[];
                else
                    data.ti_data=[data.ti_data; vals];
                    temp = fgetl(fid);
                end
            end
        end
        data.datatype='stellopt_neteti';
    otherwise
        % Read first line
        line=fgetl(fid);
        vals=sscanf(line,'%10e',[1 10]);
        arr=vals;
        test=0;
        while ~test
            line=fgetl(fid);
            if strcmp(line,' ') || isempty(line) || feof(fid)
                test=1;
            else
                vals=sscanf(line,'%10e',[1 10]);
                arr=[arr; vals];
            end
        end
        data.data=arr;
        %fgetl(fid); %Blank
        %fgetl(fid); %Fitted am header
        %data.am=fscanf(fid,'%d %f',[2 11]);
        %fgetl(fid); %\n
        %fgetl(fid); %blank
        %line=fgetl(fid);
        %sdex=strfind(line,'=');
        %data.am_norm=sscanf(line(sdex+3:max(size(line))),'%f');
        data.datatype='stellopt_pressure';
end
% Get Normalization Factor
if ~feof(fid)
    line=fgetl(fid);
    sdex=strfind(line,'=');
    data.norm=sscanf(line(sdex+3:max(size(line))),'%f');
else
    data.norm=3.0;
end
fclose(fid);
end

function data = read_stellopt_mseprof(filename)
%READ_STELLOPT_MSEPROF Reads the STELLOPT mse_prof output file
%   This file reads the 'mse_prof' file from the STELLOPT code into a
%   structure named data.
%   Version v0.9 (lazerson@pppl.gov)

% Main Program
fid=fopen(filename,'r');
% First read header
data.head=fgetl(fid);
% Test the header and read the file.
if ~isempty(strfind(data.head,'mse-Er'))
    temp=fscanf(fid,'%e',[11 inf]);
    arr(1:7,:) = temp(1:7,:);
    arr(8:9,:) = temp(10:11,:);
    data.er    = temp(8,:);
    data.ez    = temp(9,:);
else
    arr=fscanf(fid,'%e',[9 inf]);
end
% Read first line

data.data=arr';
data.datatype='stellopt_mse';
fclose(fid);
end


function data = read_stellopt_new(filename)
fid = fopen(filename,'r');
iter = 0;
niter = 0;
l_headers=0;
line=fgetl(fid);
if ~isempty(strfind(line,'VERSION'))
    data.version=sscanf(line,'%*s %d');
    l_headers = 1;
    line=fgetl(fid);
end
while ~feof(fid);
    if ~isempty(strfind(line,'ITER'))
        iter=sscanf(line,'%*s %d');
        niter = niter + 1;
        if ~isempty(iter)
            data.iter(niter) = iter;
        else
            data.iter(niter) = data.iter(niter-1);
        end
    else
        tstr=char(sscanf(line,'%s %*d %*d')');
        temp=sscanf(line,'%*s %d %d');
        nvars = temp(1);
        nels = temp(2);
        if l_headers
            header=fgetl(fid);
        end
        temp=fscanf(fid,'%e',[nels nvars])';
        switch tstr
            % Single Values
            case {'ASPECT','ASPECT_MAX','BETA','CURTOR','KAPPA', 'KAPPA_AVG', 'PHIEDGE',...
                    'VOLUME','WP','RBTOR','R0','Z0','BETATOR','BETAPOL',...
                    'B0'}
                data.([tstr '_target'])(niter,:) = temp(1);
                data.([tstr '_sigma'])(niter,:) = temp(2);
                data.([tstr '_equil'])(niter,:) = temp(3);
                data.([tstr '_chisq'])(niter,:) = ((temp(1)-temp(3))./(temp(2))).^2;
            % BPROBES
            case{'B_PROBES'}
                data.([tstr '_X'])(niter,:) = temp(:,1);
                data.([tstr '_Y'])(niter,:) = temp(:,2);
                data.([tstr '_Z'])(niter,:) = temp(:,3);
                data.([tstr '_MODB'])(niter,:) = temp(:,4);
                data.([tstr '_target'])(niter,:) = temp(:,5);
                data.([tstr '_sigma'])(niter,:) = temp(:,6);
                data.([tstr '_equil'])(niter,:) = temp(:,7);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,5)-temp(:,7))./(temp(:,6))).^2;
            % Multiple values
            case {'FLUXLOOPS','SEGROG'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
            % Old way
            %case {'EXTCUR'}
            %    data.([tstr '_target'])(niter,:) = temp(:,1);
            %    data.([tstr '_sigma'])(niter,:) = temp(:,2);
            %    data.([tstr '_equil'])(niter,:) = temp(:,3);
            %    data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
            case {'EXTCUR'}
                data.([tstr '_target'])(niter,temp(:,4)) = temp(:,1);
                data.([tstr '_sigma'])(niter,temp(:,4)) = temp(:,2);
                data.([tstr '_equil'])(niter,temp(:,4)) = temp(:,3);
                data.([tstr '_chisq'])(niter,temp(:,4)) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
            case {'SEPARATRIX','LIMITER'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_R'])(niter,:) = temp(:,4);
                data.([tstr '_PHI'])(niter,:) = temp(:,5);
                data.([tstr '_Z'])(niter,:) = temp(:,6);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
            % Thomson
            case {'TE','TI','IOTA','VPHI','PRESS','VACIOTA','PRESSPRIME'}
                data.([tstr '_R'])(niter,:) = temp(:,1);
                data.([tstr '_PHI'])(niter,:) = temp(:,2);
                data.([tstr '_Z'])(niter,:) = temp(:,3);
                data.([tstr '_S'])(niter,:) = temp(:,4);
                data.([tstr '_target'])(niter,:) = temp(:,5);
                data.([tstr '_sigma'])(niter,:) = temp(:,6);
                data.([tstr '_equil'])(niter,:) = temp(:,7);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,5)-temp(:,7))./(temp(:,6))).^2;
            % NE (becasue we do something funn to calculate chisq
            case {'NE'}
                data.([tstr '_R'])(niter,:) = temp(:,1);
                data.([tstr '_PHI'])(niter,:) = temp(:,2);
                data.([tstr '_Z'])(niter,:) = temp(:,3);
                data.([tstr '_S'])(niter,:) = temp(:,4);
                data.([tstr '_target'])(niter,:) = temp(:,5);
                data.([tstr '_sigma'])(niter,:) = temp(:,6);
                data.([tstr '_equil'])(niter,:) = temp(:,7);
                target = temp(:,5);
                sigma  = temp(:,6);
                equil  = temp(:,7);
                data.([tstr '_chisq'])(niter,:) = ((target-equil)./(sigma)).^2;
                data.([tstr '_target'])(niter,:) = target;
                data.([tstr '_sigma'])(niter,:) = sigma;
                data.([tstr '_equil'])(niter,:) = equil;
            % LINE MEASUREMENTS
            case {'NELINE','TELINE','TILINE','ZEFFLINE','FARADAY','SXR',...
                    'XICS','XICS_BRIGHT','XICS_V','XICS_W3'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_R0'])(niter,:) = temp(:,4);
                data.([tstr '_PHI0'])(niter,:) = temp(:,5);
                data.([tstr '_Z0'])(niter,:) = temp(:,6);
                data.([tstr '_R1'])(niter,:) = temp(:,7);
                data.([tstr '_PHI1'])(niter,:) = temp(:,8);
                data.([tstr '_Z1'])(niter,:) = temp(:,9);
            % VISUAL BREMSSTRAHLUNG
            case {'VISBREMLINE'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_LAMBDA'])(niter,:) = temp(:,4);
                data.([tstr '_CALIB'])(niter,:) = temp(:,5);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3).*temp(:,5))./(temp(:,2))).^2;
                data.([tstr '_R0'])(niter,:) = temp(:,6);
                data.([tstr '_PHI0'])(niter,:) = temp(:,7);
                data.([tstr '_Z0'])(niter,:) = temp(:,8);
                data.([tstr '_R1'])(niter,:) = temp(:,9);
                data.([tstr '_PHI1'])(niter,:) = temp(:,10);
                data.([tstr '_Z1'])(niter,:) = temp(:,11);
            % MSE
            case {'MSE'}
                data.([tstr '_R'])(niter,:) = temp(:,1);
                data.([tstr '_PHI'])(niter,:) = temp(:,2);
                data.([tstr '_Z'])(niter,:) = temp(:,3);
                data.([tstr '_S'])(niter,:) = temp(:,4);
                data.([tstr '_target'])(niter,:) = temp(:,5);
                data.([tstr '_sigma'])(niter,:) = temp(:,6);
                data.([tstr '_ER'])(niter,:) = temp(:,7);
                data.([tstr '_EZ'])(niter,:) = temp(:,8);
                data.([tstr '_equil'])(niter,:) = temp(:,9);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,5)-temp(:,9))./(temp(:,6))).^2;
            % BALLOON
            case {'BALLOON'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_grate'])(niter,:) = temp(:,4);
                data.([tstr '_theta'])(niter,:) = temp(:,5);
                data.([tstr '_zeta'])(niter,:) = temp(:,6);
                data.([tstr '_k'])(niter,:) = temp(:,7);
            % BOOTSTRAP
            case {'BOOTSTRAP'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_s'])(niter,:) = temp(:,4);
                data.([tstr '_avg_jdotb'])(niter,:) = temp(:,5);
                data.([tstr '_beam_jdotb'])(niter,:) = temp(:,6);
                data.([tstr '_boot_jdotb'])(niter,:) = temp(:,7);
                data.([tstr '_jBbs'])(niter,:) = temp(:,8);
                data.([tstr '_facnu'])(niter,:) = temp(:,9);
                data.([tstr '_bsnorm'])(niter,:) = temp(:,10);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
            % HELICITY
            case {'HELICITY'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_bnorm'])(niter,:) = temp(:,4);
                %data.([tstr '_m'])(niter,:) = temp(:,5); % Old Way
                %data.([tstr '_n'])(niter,:) = temp(:,6);
            % HELICITY
            case {'HELICITY_FULL'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_bnorm'])(niter,:) = temp(:,4);
                data.([tstr '_k'])(niter,:) = temp(:,5); 
                data.([tstr '_m'])(niter,:) = temp(:,6); 
                data.([tstr '_n'])(niter,:) = temp(:,7);
                % Mimic old version output
                surfs = unique(temp(:,5));
                for i = 1:length(surfs)
                    k=surfs(i);
                    data.HELICITY2_target(niter,i) = 0.0;
                    kdex=temp(:,5)==k;
                    data.HELICITY2_sigma(niter,i) = mean(data.HELICITY_FULL_chisq(niter,kdex));
                    data.HELICITY2_equil(niter,i) = sqrt(abs(sum(data.HELICITY_FULL_equil(niter,kdex))));
                    data.HELICITY2_chisq(niter,i) = sum(data.HELICITY_FULL_chisq(niter,kdex));
                end
            % TXPORT
            case {'TXPORT'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_s'])(niter,:) = temp(:,4);
                k1 = strfind(header,'(')+1;
                k2 = strfind(header,')')-1;
                data.([tstr '_prox']) = header(k1:k2);
            % KINK
            case {'KINK'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_wp'])(niter,:) = temp(:,4);
                data.([tstr '_wk'])(niter,:) = temp(:,5);
                data.([tstr '_omega'])(niter,:) = temp(:,6);
            % MAGWELL
            case {'MAGWELL'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_Bsqav'])(niter,:) = temp(:,4);
                data.([tstr '_p'])(niter,:) = temp(:,5);
                data.([tstr '_pp'])(niter,:) = temp(:,6);
                data.([tstr '_k'])(niter,:) = temp(:,7);
            % Curvature Kurtosis
            case {'CURVATURE_KERT'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_kurtosis'])(niter,:) = temp(:,4);
                data.([tstr '_kappa_avg'])(niter,:) = temp(:,5);
                data.([tstr '_kappa_max'])(niter,:) = temp(:,6);
                data.([tstr '_phi'])(niter,:) = temp(:,7);
            % Curvature Kurtosis
            case {'CURVATURE_P2'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_p1'])(niter,:) = temp(:,4);
                data.([tstr '_p2'])(niter,:) = temp(:,5);
            % COIL_BNORM (COILOPT++)
            case {'COIL_BNORM'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_U'])(niter,:) = temp(:,4);
                data.([tstr '_V'])(niter,:) = temp(:,5);
                data.([tstr '_BNEQ'])(niter,:) = temp(:,6);
                data.([tstr '_BNF'])(niter,:) = temp(:,7);
            % ORBIT
            case {'ORBIT'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_s'])(niter,:) = temp(:,4);
            % S11
            case {'S11','S12','S21','S22'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_s'])(niter,:) = temp(:,4);
            % J*
            case {'J_STAR'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_AVGJSTAR'])(niter,:) = temp(:,4);
                data.([tstr '_TRAPSJSTAR'])(niter,:) = temp(:,5);
                data.([tstr '_UJSTAR'])(niter,:) = temp(:,6);
                data.([tstr '_K'])(niter,:) = temp(:,7);
                data.([tstr '_IJSTAR'])(niter,:) = temp(:,8);
            % NEO
            case {'NEO'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_k'])(niter,:) = temp(:,4);
            % NTV (IPECOPT)
            case {'NTV'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_s'])(niter,:) = temp(:,4);
            % NTV_integrated (IPECOPT)
            case {'intT_phi'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_s'])(niter,:) = temp(:,4);
            % NTV_integrated (IPECOPT)
            case {'CHIRIKOV_VAC','CHIRIKOV'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_s'])(niter,:) = temp(:,4);
                data.([tstr '_q'])(niter,:) = temp(:,5);
            % JDOTB
            case {'JDOTB'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_s'])(niter,:) = temp(:,4);
            % JTOR
            case {'JTOR'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_s'])(niter,:) = temp(:,4);
            % DKES
            case {'DKES'} 
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_s'])(niter,:) = temp(:,4);
                data.([tstr '_nu'])(niter,:) = temp(:,5);
                data.([tstr '_er'])(niter,:) = temp(:,6);
                data.([tstr '_L11p'])(niter,:) = temp(:,7);
                data.([tstr '_L11m'])(niter,:) = temp(:,8);
                data.([tstr '_L33p'])(niter,:) = temp(:,9);
                data.([tstr '_L33m'])(niter,:) = temp(:,10);
                data.([tstr '_L31p'])(niter,:) = temp(:,11);
                data.([tstr '_L31m'])(niter,:) = temp(:,12);
                data.([tstr '_scal11'])(niter,:) = temp(:,13);
                data.([tstr '_scal33'])(niter,:) = temp(:,14);
                data.([tstr '_scal31'])(niter,:) = temp(:,15);
            % DKES
            case {'DKES_ERDIFF'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_s'])(niter,:) = temp(:,4);
                data.([tstr '_nu'])(niter,:) = temp(:,5);
                data.([tstr '_er_plus'])(niter,:) = temp(:,6);
                data.([tstr '_er_minus'])(niter,:) = temp(:,7);
                data.([tstr '_L11p_plus'])(niter,:) = temp(:,8);
                data.([tstr '_L11m_plus'])(niter,:) = temp(:,9);
                data.([tstr '_L33p_plus'])(niter,:) = temp(:,10);
                data.([tstr '_L33m_plus'])(niter,:) = temp(:,11);
                data.([tstr '_L31p_plus'])(niter,:) = temp(:,12);
                data.([tstr '_L31m_plus'])(niter,:) = temp(:,13);
                data.([tstr '_scal11_plus'])(niter,:) = temp(:,14);
                data.([tstr '_scal33_plus'])(niter,:) = temp(:,15);
                data.([tstr '_scal31_plus'])(niter,:) = temp(:,16);
                data.([tstr '_L11p_minus'])(niter,:) = temp(:,17);
                data.([tstr '_L11m_minus'])(niter,:) = temp(:,18);
                data.([tstr '_L33p_minus'])(niter,:) = temp(:,19);
                data.([tstr '_L33m_minus'])(niter,:) = temp(:,20);
                data.([tstr '_L31p_minus'])(niter,:) = temp(:,21);
                data.([tstr '_L31m_minus'])(niter,:) = temp(:,22);
                data.([tstr '_scal11_minus'])(niter,:) = temp(:,23);
                data.([tstr '_scal33_minus'])(niter,:) = temp(:,24);
                data.([tstr '_scal31_minus'])(niter,:) = temp(:,25);
            % ECE
            case {'ECEREFLECT'}
                data.([tstr '_target'])(niter,:) = temp(:,1);
                data.([tstr '_sigma'])(niter,:) = temp(:,2);
                data.([tstr '_equil'])(niter,:) = temp(:,3);
                data.([tstr '_chisq'])(niter,:) = ((temp(:,1)-temp(:,3))./(temp(:,2))).^2;
                data.([tstr '_freq'])(niter,:) = temp(:,4);
                data.([tstr '_tradx'])(niter,:) = temp(:,5);
                data.([tstr '_trado'])(niter,:) = temp(:,6);
                data.([tstr '_mix'])(niter,:) = temp(:,7);
            % CHISQ Vectors
            case {'TARGETS','SIGMAS','VALS'}
                data.(tstr)(niter,:) = temp;
            otherwise
                data.(tstr)=temp;
        end
        line=fgetl(fid); % Get the blank which fscanf leaves
    end
    line=fgetl(fid); % Get next line
end
fclose(fid);
data.datatype='stellopt_new';
end
